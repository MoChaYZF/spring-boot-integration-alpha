<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- root的作用类似于logger父亲，它与logger的作用就是日志收集，过滤，委派给appender作日志输出 -->
    <!-- appender的作用是控制日志输出 -->
    <!-- encoder和layout的作用是控制日志输出格式 -->
    <!-- appender里面只需配置：（1）日志滚动策略（2）日志输出格式（3）过滤日志级别 -->

    <!-- 日志格式应用spring boot默认的格式 -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!-- 用于引用Spring上下文的变量，引用配置文件application.yml里的spring.application.name配置值 -->
    <springProperty scope="context" name="springAppName" source="spring.application.name"/>

    <!-- 控制台日志输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder 默认配置为PatternLayoutEncoder -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!-- 配置info日志输出 -->
    <appender name="info_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- INFO日志滚动输出策略 maxFileSize和maxHistory分别为文件多大滚动和保留多长时间 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- %i：当文件大小超过maxFileSize时，按照i进行文件滚动 -->
            <FileNamePattern>${springAppName}/%d{yyyy-MM-dd}/info/%i.log</FileNamePattern>
            <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>180</maxHistory>
        </rollingPolicy>

        <!-- 日志文件输出的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>

        <!-- 过滤日志级别 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 配置warn日志输出 -->
    <appender name="warn_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- %i：当文件大小超过maxFileSize时，按照i进行文件滚动 -->
            <fileNamePattern>${springAppName}/%d{yyyy-MM-dd}/warn/%i.log</fileNamePattern>
            <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
            <maxFileSize>20MB</maxFileSize>
            <maxHistory>180</maxHistory>
        </rollingPolicy>

        <!-- 日志文件输出的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 配置error日志输出 -->
    <appender name="error_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- %i：当文件大小超过maxFileSize时，按照i进行文件滚动 -->
            <fileNamePattern>${springAppName}/%d{yyyy-MM-dd}/error/%i.log</fileNamePattern>
            <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
            <maxFileSize>20MB</maxFileSize>
            <maxHistory>180</maxHistory>
        </rollingPolicy>

        <!-- 日志文件输出的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 异步日志输出 -->
    <appender name="async_info" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="info_log"/>
    </appender>

    <appender name="async_warn" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="warn_log"/>
    </appender>

    <appender name="async_error" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志. 默认的，如果队列的80%已满，则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <!-- 为了保存所有的日志，设置该值为0 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="error_log"/>
    </appender>

    <!-- 将root的打印级别设置为“INFO” -->
    <!-- root委派appender进行日志输出 -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="async_info"/>
        <appender-ref ref="async_warn"/>
        <appender-ref ref="async_error"/>
    </root>
</configuration>
